*交互方式：CMBD,PUBLIC/PRIVATE,Ad-Hoc,Playbooks
*工具集： Inventory、Modules、Plugins 和 API。
*Inventory：Ansible 管理主机清单，在/etc/ansible/hosts，通过在 ansible 命令中使用选项-i或—inventory-file来指定 Inventory。hosts 文件中，以[ ]包含的部分代表组名，设备列表支持主机名和IP地址。若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口标明，以行为单位分隔配置。另外，hosts文件还支持通配符。
*Modules：Ansible 执行命令功能模块，多数为内置的核心模块，也可自定义；
*Plugins：模块功能的补充，如连接类型插件、循环插件、变量插件、过滤插件等，该功能不太常用；
*API：供第三方程序调用的应用程序编程接口；
*Ansible Playbooks：任务脚本，编排定义Ansible任务及的配置文件，由Ansible按序依次执行，通常是JSON格式的YML文件；
*yum -y install ansible
*ssh-keygen -t rsa
*ssh-copy-id -i /root/.ssh/id_rsa.pub root@10.0.0.181
*ansible -i /etc/ansible/hosts web -m ping
*ansible web -m command -a "systemctl status httpd" --limit "192.168.100.20"  #只对web组中192.168.1.2主机操作
*ansible 192.168.100.20 -m command -a "systemctl status httpd"  #限定ip
*ansible 192.168.1.* -m command -a "systemctl status httpd"   #限定网段
*ansible all -f 5 -m ping       # -f并发线程数，-m指定模块
ansible web --list 
ansible web -m command -a "df -hT"
*Ansible-doc用来查询ansible模块文档的说明，类似于man命令
ansible-doc -l  #列出支持的模块
ansible-doc ping
*Ansible-playbook命令后跟yml格式的playbook文件，playbook文件存放了要执行的任务代码
*ansible-console
*command模块在远程主机执行命令，不支持管道、重定向等shell的特性。常用的参数如下：
chdir：在远程主机上运行命令前要提前进入的目录；
creates：在命令运行时创建一个文件，如果文件已存在，则不会执行创建任务；
removes：在命令运行时移除一个文件，如果文件不存在，则不会执行移除任务；
executeable：指明运行命令的shell程序
ansible web -m command -a "chdir=/ ls ./"
*shell模块在远程主机执行命令,和command模块的区别是它支持Shell特性：如管道、重定向等。
ansible web -m shell -a "echo hello world " 
ansible web -m shell -a "echo hello world > /1.txt"
*copy模块用于复制指定主机文件到远程主机的指定位置
dest：指出复制文件的目标目录位置，使用绝对路径。如果源是目录，则目标也要是目录，如果目标文件已存在，会覆盖原有内容；
src：指出源文件的路径，可以使用相对路径和绝对路径，支持直接指定目录。如果源是目录，则目标也要是目录；
mode：指出复制时，目标文件的权限，可选；
owner：指出复制时，目标文件的属主，可选；
group：指出复制时目标文件的属组，可选；
content：指出复制到目标主机上的内容，不能和src一起使用，相当于复制content指明的数据到目标文件中；
ansible web -m copy -a "src=/etc/hosts dest=/root/a1.hosts mode=777 owner=root group=root"
*hostname模块用于管理远程主机上的主机名
ansible 192.168.100.20 -m hostname -a "name=test"
*yum模块基于yum机制，对远程主机管理程序包。常用的参数如下:
name：程序包名称，可以带上版本号。若不指明版本，则默认为最新版本；
state=present|atest|absent：指明对程序包执行的操作:present表明安装程序包，latest表示安装最新版本的程序包，absent表示卸载程序包；
disablerepo：在用yum安装时，临时禁用某个仓库的ID；
enablerepo：在用yum安装时，临时启用某个仓库的ID；
conf_file：yum运行时的配置文件，而不是使用默认的配置文件；
disable_gpg_check=yes|no：是否启用完整性校验功能；
ansible web -m shell -a "/usr/bin/rm -rf /etc/yum.repos.d/CentOS-*"
ansible web -m yum -a "name=httpd state=present"
ansible web -m shell -a "rpm -qa | grep httpd"
ansible web -m shell -a "systemctl start httpd"   
ansible web -m shell -a "netstat -anptu | grep httpd" 
*service模块为用来管理远程主机上的服务的模块
name:被管理的服务名称；
state=started|stopped|restarted：动作包含启动，关闭或重启；
enable=yes|no:表示是否设置该服务开机自启动；
runlevel:如果设定了enabled开机自启动，则要定义在哪些运行目标下自动启动；
ansible web -m service -a "name=httpd enabled=yes state=restarted"
*user模块主要用于管理远程主机上的用户账号
ansible web -m user -a "name=user01 system=yes uid=502 group=root groups=root shell=/etc/nologin home=/home/user01 password=pwd@123"
*YAML语法结构通过缩进来展示，通过“-”来代表项；“：”用来分隔键和值；整个文件以“--”开头并以“…”结尾
---
- hosts: web1                   <!--针对web1组中的操作-->
  remote_user: root                    <!--远端执行用户身份为root-->
  tasks:                <!--任务列表-->
        - name: adduser                               <!--任务名称-->
          user: name=user1 state=present <!--执行user模块，创建用户-->
          tags:                <!--创建tag标签-->
          - aaa                 <!--tag标签为aaa-->
        - name: addgroup           <!--任务名称-->
          group: name=root system=yes <!--执行group模块，创建组-->
          tags:               <!--创建tag标签-->
          - bbb               <!--tag标签为bbb-->
- hosts: web2               <!--针对web2组中的操作-->
  remote_user: root        <!--远端执行用户身份为root-->
  tasks:                     <!--任务列表-->
        - name: copy file to web            <!--任务名称-->
          copy: src=/etc/passwd dest=/home        <!--执行copy模块，复制文件-->
          tags:                        <!--创建tag标签-->
          - ccc                     <!--tag标签为ccc-->
...
*playbook的核心元素包含：
hosts：任务的目标主机，多个主机用冒号分隔，一般调用/etc/ansible/hosts中的分组信息；
remote_user：远程主机上，运行此任务的默认身份为root；
tasks：任务，即定义的具体任务，由模块定义的操作列表；
handlers：触发器，类似tasks，只是在特定的条件下才会触发的任务。
某任务的状态在运行后为changed时，可通过“notify”通知给相应的handlers进行触发执行；
roles：角色，将hosts剥离出去，由tasks、handlers等所组成的一种特定的结构集合；
*ansible-playbook [option] /PATH/TO/PLAYBOOK.yaml
—syntax-check：检测yaml文件的语法；
-C（—check）：预测试，不会改变目标主机的任何设置；
—list-hosts：列出yaml文件影响的主机列表；
—list-tasks：列出yaml文件的任务列表；
—list-tags：列出yaml文件中的标签；
-t TAGS（—tags=TAGS）：表示只执行指定标签的任务；
—skip-tags=SKIP_TAGS：表示除了指定标签的任务，执行其他任务；
—start-at-task=START_AT：从指定的任务开始往下运行；
通常情况下先执行 ansible-playbook -C /PATH/TO/PLAYBOOK.yaml 命令进行测试，测试没问题后再执行 ansible-playbook /PATH/TO/PLAYBOOK.yml 命令。
*触发器：需要触发才能执行的任务，当之前定义在tasks中的任务执行成功后，若希望在此基础上触发其他任务，这时就需要定义handlers。handlers和task很类似，但是它只在被task通知的时候才会触发执行。handlers只会在所有任务执行完成后执行。而且即使被通知了很多次，它也只会执行一次。handlers按照定义的顺序依次执行。
---
- hosts: web1
  remote_user: root
  tasks:
        - name: change port
          command: sed -i 's/Listen\ 80/Listen\ 8080/g' /etc/httpd/conf/httpd.conf
          notify:                             <!--配置触发条件-->
                - restart httpd server    <!--完成该任务后调用名为“restart httpd server”的触发器-->
  handlers:                                      <!--配置触发器-->
        - name: restart httpd server  <!--指定触发器名字，要和上面“notify”指定的触发器名字一样-->
          service: name=httpd state=restarted<!--触发任务为重启httpd服务-->
...
*/etc/ansible/roles/ 目录下有很多子目录，其中每一个子目录对应一个角色，每个角色也有自己的目录结构









