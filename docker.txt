sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum list docker-ce --showduplicates | sort -r
sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io
sudo yum install docker-ce docker-ce-cli containerd.io
curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io  #¾µÏñ¼ÓËÙ
sudo systemctl start docker
sudo docker run hello-world


*Docker:image container respository
*image:read-only template
*container:instance created from image.ÈÝÆ÷Æô¶¯Ê±´´½¨Ò»²ã¿ÉÐ´²ã×÷Îª×îÉÏ²ã
*Regisrty´æ·Å¶à¸örespository,Ã¿¸örespository°üº¬¶à¸öimage.respository include privite and public.
*service dockrt start
*»ñÈ¡¾µÏñ£ºsudo docker pull ubuntu:12.04  Ö¸¶¨²Ö¿â£ºsudo docker pull dl.dockerpool.com:5000/ubuntu:12.04
*´´½¨ÈÝÆ÷ÔËÐÐbash:sudo docker run -t -i ubuntu:12.04 /bin/bash
*±¾µØ¾µÏñ£ºdocker images
*Ìá½»¸±±¾£ºdocker commit [-ma]
*mkdir sinatra > cd sinatra > touch Dockerfile > ÔÚdockerfileÖÐÐ´ÈëÏÂÃæÐÅÏ¢ > sudo	docker	build	-t="ouruser/sinatra:v2" .  
#	This	is	a	comment
FROM	ubuntu:14.04
MAINTAINER	Docker	Newbee	<newbee@docker.com> # Î¬»¤ÕßÐÅÏ¢
RUN	apt-get	-qq	update
RUN	apt-get	-qqy	install	ruby	ruby-dev
RUN	gem	install	sinatra
*ÐÞ¸Ä¾µÏñ±êÇ©£º	sudo docker	tag	5db5f8471261 ouruser/sinatra:devel
*±¾µØÎÄ¼þÏµÍ³µ¼Èë¾µÏñ£ºsudo	cat	ubuntu-14.04-x86_64-minimal.tar.gz |docker import - ubuntu:14.04
*docker hub×¢²áºóÍÆËÍ¾µÏñ£ºsudo docker push ouruser/sinatra
*´æ³ö¾µÏñ£ºsudo	docker save -o ubuntu_14.04.tar	ubuntu:14.04
*ÔØÈë¾µÏñ£ºsudo docker load --input                              ubuntu_14.04.tar
*ÒÆ³ý±¾µØ¾µÏñ£ºdocker rmi training/sinatra É¾³ýÇ°ÓÃdocker rm É¾³ýÒÀÀµÓÚ´Ë¾µÏñµÄËùÓÐÈÝÆ÷
*ÐÂ½¨Æô¶¯£º	sudo docker run -t -i ubuntu:12.04 /bin/bash
*Æô¶¯ÒÑÖÕÖ¹ÈÝÆ÷:docker start
*ÖÕÖ¹ÈÝÆ÷£ºdocker stop
*½øÈëÈÝÆ÷£ºdocker attach ID Ò²¿ÉÊ¹ÓÃnsenter»òÏÂÔØ.bashrc_docker
------------------------------------------------------------------------------------²Ù×÷--------------------------------------------------------
*µ×²ã¼¼ÊõÖ§³Ö£ºNamespaces£¨×ö¸ôÀë£©¡¢CGroups£¨×ö×ÊÔ´ÏÞÖÆ£©¡¢UnionFS£¨¾µÏñºÍÈÝÆ÷µÄ·Ö²ã£© the-underlying-technology Docker µ×²ã¼Ü¹¹·ÖÎö
*docker engine°üÀ¨£ºCLI->REST API->dockerd
*Docker Damon£ºdockerd£¬ÓÃÀ´¼àÌý Docker API µÄÇëÇóºÍ¹ÜÀí Docker ¶ÔÏó£¬±ÈÈç¾µÏñ¡¢ÈÝÆ÷¡¢ÍøÂçºÍ Volume¡£
*docker pull [Ñ¡Ïî] [Docker Registry µØÖ·[:¶Ë¿Ú]/]²Ö¿âÃû[:±êÇ©]
*docker run -it --rm ubuntu:16.04 /bin/bash    #ÈÝÆ÷exitÍË³öºóÉ¾³ý
*docker image ls
*docker system df
*docker runÀ´´´½¨ÈÝÆ÷Ê±,¼ì²é±¾µØÊÇ·ñ´æÔÚÖ¸¶¨µÄ¾µÏñ£¬²»´æÔÚ¾Í´Ó¹«ÓÐ²Ö¿âÏÂÔØ¡£ÀûÓÃ¾µÏñ´´½¨²¢Æô¶¯Ò»¸öÈÝÆ÷¡£·ÖÅäÒ»¸öÎÄ¼þÏµÍ³£¬²¢ÔÚÖ»¶ÁµÄ¾µÏñ²ãÍâÃæ¹ÒÔØÒ»²ã¿É¶ÁÐ´²ã¡£´ÓËÞÖ÷Ö÷»úÅäÖÃµÄÍøÇÅ½Ó¿ÚÖÐÇÅ½ÓÒ»¸öÐéÄâ½Ó¿Úµ½ÈÝÆ÷ÖÐÈ¥¡£´ÓµØÖ·³ØÅäÖÃÒ»¸ö ip µØÖ·¸øÈÝÆ÷¡£Ö´ÐÐÓÃ»§Ö¸¶¨µÄÓ¦ÓÃ³ÌÐò£¬Ö´ÐÐÍê±ÏºóÈÝÆ÷±»ÖÕÖ¹¡£
*docker container ls -a   
*docker container start ID 
*docker run -d ubuntu:16.04 /bin/sh -c "while true; do echo hello world; sleep 1; done"   # -dºóÌ¨ÔËÐÐ
*docker container logs ID
*docker container stop ID
*docker exec -it ID bash  #½øÈëÈÝÆ÷£¬ÍË³öºó²»»áÖÕÖ¹
*docker container rm ID
*docker container prune  »ò docker ps -aq  #É¾³ýËùÓÐÖÕÖ¹µÄÈÝÆ÷
*docker rmi ¾µÏñÃû
*docker run --name webserver -d -p 80:80 nginx
*docker diff webserver  
*docker commit --author "lz" --message "ÐÞ¸ÄÁËÄ¬ÈÏÊ×Ò³" webserver nginx:v2   #±£´æÎª¾µÏñ
*docker history nginx:v2
*docker run --name webserv2 -d -p 81:80 nginx:v2   # http://localhost:81
---------------------------------------------------------------------dockerfile-------------------------------------------------------
*vi Dcokerfile:
FROM nginx   #¿Õ°×¾µÏñ¿ÉÊ¹ÓÃscratch
RUN echo '<h1>Hello, Docker!</h1>' > /usr/share/nginx/html/index.html
*¶à²ãÐ´·¨£º
FROM debian:jessie
RUN buildDeps='gcc libc6-dev make' \
    && apt-get update \
    && apt-get install -y $buildDeps \
    && wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \
    && mkdir -p /usr/src/redis \
    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
    && make -C /usr/src/redis \
    && make -C /usr/src/redis install \
    && rm -rf /var/lib/apt/lists/* \
    && rm redis.tar.gz \
    && rm -r /usr/src/redis \
    && apt-get purge -y --auto-remove $buildDeps
*docker build -t nginx:v3 .      #¹¹½¨¾µÏñ£¬Dockerfile ÎÄ¼þËùÔÚÄ¿Â¼Ö´ÐÐ£¬.ÎªÉÏÏÂÎÄÄ¿Â¼
*.dockerignore£¬¸ÃÎÄ¼þÊÇÓÃÓÚÌÞ³ý²»ÐèÒª×÷ÎªÉÏÏÂÎÄ´«µÝ¸ø Docker ÒýÇæµÄ
*docker save alpine | gzip > alpine-latest.tar.gz   
*docker load -i alpine-latest.tar.gz   #½áºÏÉÏÌõÃüÁîÇ¨ÒÆ¾µÏñ
*docker save <¾µÏñÃû> | bzip2 | pv | ssh <ÓÃ»§Ãû>@<Ö÷»úÃû> 'cat | docker load'
--------------------------------------------------------Ë½ÓÐ²Ö¿â-------------------------------------------------
*docker login 
*docker logout
*docker search centos
*docker pull centos
*docker tag ubuntu:17.10 username/ubuntu:17.10
*docker run -d -p 5000:5000 --restart=always --name registry registry   #Ê¹ÓÃ¹Ù·½µÄregistry¾µÏñÀ´Æô¶¯Ë½ÓÐ²Ö¿â,²Ö¿â»á±»´´½¨ÔÚÈÝÆ÷µÄ/var/lib/registryÄ¿Â¼ÏÂ, -v ²ÎÊýÀ´½«¾µÏñÎÄ¼þ´æ·ÅÔÚ±¾µØµÄÖ¸¶¨Â·¾¶¡£ÀýÈçÏÂÃæµÄÀý×Ó½«ÉÏ´«µÄ¾µÏñ·Åµ½±¾µØµÄ /opt/data/registry Ä¿Â¼¡£
docker run -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry registry
*docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest
*docker push 127.0.0.1:5000/ubuntu:latest
*Ë½ÓÐ²Ö¿âÉèÖÃ£¬/etc/docker/daemon.jsonÖÐÐ´Èë:
{
  "registry-mirror": [
    "https://registry.docker-cn.com"
  ],
  "insecure-registries": [
    "192.168.199.100:5000"
  ]
}
----------------------------------------------------Êý¾Ý¹²Ïí---------------------------
*Êý¾Ý¾í¡¢¹ÒÔØÖ÷»úÄ¿Â¼
*Êý¾Ý¾íÊÇÒ»¸ö¿É¹©Ò»¸ö»ò¶à¸öÈÝÆ÷Ê¹ÓÃµÄÌØÊâÄ¿Â¼£¬ËüÈÆ¹ýUFS,¿ÉÒÔÔÚÈÝÆ÷Ö®¼ä¹²ÏíºÍÖØÓÃ,¶ÔÊý¾Ý¾íµÄÐÞ¸Ä»áÁ¢ÂíÉúÐ§,¶ÔÊý¾Ý¾íµÄ¸üÐÂ£¬²»»áÓ°Ïì¾µÏñ£¬Êý¾Ý¾íÄ¬ÈÏ»áÒ»Ö±´æÔÚ£¬¼´Ê¹ÈÝÆ÷±»É¾³ý
*docker volume create my-vol
*docker volume ls
*docker volume inspect my-vol  
*docker run -d -P --name web --mount source=my-vol,target=/webapp training/webapp python app.py
*docker volume rm my-vol 
*docker volume prune
*docker run -d -P --name web  -v /src/webapp:/opt/webapp:ro  training/webapp python app.py   #¹ÒÔØÖ÷»úÄ¿Â¼,Ö»¶Á
*docker run --rm -it --mount type=bind,source=$HOME/.bash_history,target=/root/.bash_history ubuntu:17.10 bash  #¹ÒÔØµ¥¸öÎÄ¼þ
-----------------------------------------------ÍøÂçÄ£Ê½---------------------------------------
*Docker½ø³ÌÆô¶¯Ê±£¬»áÔÚÖ÷»úÉÏ´´½¨Ò»¸öÃûÎªdocker0µÄÐéÄâÍøÇÅ£¬´ËÖ÷»úÉÏÆô¶¯µÄDockerÈÝÆ÷»áÁ¬½Óµ½Õâ¸öÐéÄâÍøÇÅÉÏ¡£´Ódocker0×ÓÍøÖÐ·ÖÅäÒ»¸ö IP ¸øÈÝÆ÷Ê¹ÓÃ£¬²¢ÉèÖÃ docker0 µÄ IP µØÖ·ÎªÈÝÆ÷µÄÄ¬ÈÏÍø¹Ø¡£bridgeÄ£Ê½ÊÇ docker µÄÄ¬ÈÏÍøÂçÄ£Ê½¡£
*docker run -tid --net=bridge --name docker_bri1 ubuntu-base:v3 docker run -tid --net=bridge --name docker_bri2 ubuntu-base:v3 
*docker network create -d bridge my-net
*docker run -it --rm --name busybox1 --network my-net busybox sh
*docker run -it --rm --name busybox2 --network my-net busybox sh
*ping busybox1
*Èç¹ûÆô¶¯ÈÝÆ÷µÄÊ±ºòÊ¹ÓÃhostÄ£Ê½,ÈÝÆ÷½«²»»áÐéÄâ³ö×Ô¼ºµÄÍø¿¨£¬ÅäÖÃ×Ô¼ºµÄ IP µÈ£¬¶øÊÇÊ¹ÓÃËÞÖ÷»úµÄ IP ºÍ¶Ë¿Ú
*docker run -tid --net=host --name docker_host1 ubuntu-base:v3
*docker exec -ti docker_host1 /bin/bash
*containerÄ£Ê½Ö¸¶¨ÐÂ´´½¨µÄÈÝÆ÷ºÍÒÑ¾­´æÔÚµÄÒ»¸öÈÝÆ÷¹²ÏíÒ»¸ö Network Namespace£¬Á½¸öÈÝÆ÷µÄ½ø³Ì¿ÉÒÔÍ¨¹ý lo Íø¿¨Éè±¸Í¨ÐÅ
*docker run -tid --net=container:docker_bri1 --name docker_con1 ubuntu-base:v3
*noneÄ£Ê½£¬Docker ÈÝÆ÷ÓµÓÐ×Ô¼ºµÄ Network Namespace£¬µ«ÊÇ£¬²¢²»ÎªDocker ÈÝÆ÷½øÐÐÈÎºÎÍøÂçÅäÖÃ
------------------------------------------------docker compose------------------------------------------
*·þÎñ (service)£ºÒ»¸öÓ¦ÓÃµÄÈÝÆ÷£¬Êµ¼ÊÉÏ¿ÉÒÔ°üÀ¨Èô¸ÉÔËÐÐÏàÍ¬¾µÏñµÄÈÝÆ÷ÊµÀý¡£
*ÏîÄ¿ (project)£ºÓÉÒ»×é¹ØÁªµÄÓ¦ÓÃÈÝÆ÷×é³ÉµÄÒ»¸öÍêÕûÒµÎñµ¥Ôª£¬ÔÚ docker-compose.yml ÎÄ¼þÖÐ¶¨Òå¡£
*¶þ½øÖÆ°²×°£º
sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
sudo rm /usr/local/bin/docker-compose  #É¾³ý 
*pip°²×°£¬arm¼Ü¹¹£º
sudo pip install -U docker-compose
curl -L https://raw.githubusercontent.com/docker/compose/1.8.0/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose
sudo pip uninstall docker-compose
*ÈÝÆ÷°²×°
curl -L https://github.com/docker/compose/releases/download/1.8.0/run.sh > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
*docker-compose [-f=<arg>...] [options] [COMMAND] [ARGS...]
-f, --file FILE Ö¸¶¨Ê¹ÓÃµÄ Compose Ä£°åÎÄ¼þ£¬Ä¬ÈÏÎª docker-compose.yml£¬¿ÉÒÔ¶à´ÎÖ¸¶¨¡£
-p, --project-name NAME Ö¸¶¨ÏîÄ¿Ãû³Æ£¬Ä¬ÈÏ½«Ê¹ÓÃËùÔÚÄ¿Â¼Ãû³Æ×÷ÎªÏîÄ¿Ãû¡£
--x-networking Ê¹ÓÃ Docker µÄ¿É°Î²åÍøÂçºó¶ËÌØÐÔ
--x-network-driver DRIVER Ö¸¶¨ÍøÂçºó¶ËµÄÇý¶¯£¬Ä¬ÈÏÎª bridge
--verbose Êä³ö¸ü¶àµ÷ÊÔÐÅÏ¢¡£
-v, --version ´òÓ¡°æ±¾²¢ÍË³ö¡£
*docker-compose kill -s SIGINT
*docker-compose run ubuntu ping docker.com
*docker-compose run --no-deps web python manage.py shell  #²»Æô¶¯¹ØÁªÈÝÆ÷
*docker-compose scale web=3 db=2
------------------------------------------------------docker machine--------------------------------------
*Docker MachineÊÇ Docker ¹Ù·½Ìá¹©µÄÒ»¸ö¹¤¾ß£¬Ëü¿ÉÒÔ°ïÖúÎÒÃÇÔÚÔ¶³ÌµÄ»úÆ÷ÉÏ°²×° Docker£¬»òÕßÔÚÐéÄâ»ú host ÉÏÖ±½Ó°²×°ÐéÄâ»ú²¢ÔÚÐéÄâ»úÖÐ°²×° Docker¡£ÎÒÃÇ»¹¿ÉÒÔÍ¨¹ý docker-machineÃüÁîÀ´¹ÜÀíÕâÐ©ÐéÄâ»úºÍ Docker¡£
*sudo curl -L https://github.com/docker/machine/releases/download/v0.13.0/docker-machine-`uname -s`-`uname -m` > /usr/local/bin/docker-machine
sudo chmod +x /usr/local/bin/docker-machine
*docker-machine create -d virtualbox test
*docker-machine create -d generic \
    --generic-ip-address=123.59.188.19 \
    --generic-ssh-user=root \
    --generic-ssh-key ~/.ssh/id_rsa \
    dev
*docker-machine ls
*docker-machine env test  #ºóÐø²Ù×÷¶ÔÏó¶¼ÊÇtestÖ÷»ú
*docker-machine ssh test
*docker-machine COMMAND --help
---------------------------------------------------------docker swarm-------------------------------------------
*SwarmÊÇÊ¹ÓÃSwarmKit¹¹½¨µÄ Docker ÒýÇæÄÚÖÃ£¨Ô­Éú£©µÄ¼¯Èº¹ÜÀíºÍ±àÅÅ¹¤¾ß.ÓÃ»§¿ÉÒÔ½«¶à¸ö Docker Ö÷»ú·â×°Îªµ¥¸ö´óÐÍµÄÐéÄâ Docker Ö÷»ú£¬¿ìËÙ´òÔìÒ»Ì×ÈÝÆ÷ÔÆÆ½Ì¨¡£
*ÔËÐÐ Docker µÄÖ÷»ú¿ÉÒÔÖ÷¶¯³õÊ¼»¯Ò»¸ö Swarm ¼¯Èº»òÕß¼ÓÈëÒ»¸öÒÑ´æÔÚµÄ Swarm ¼¯Èº£¬ÕâÑùÕâ¸öÔËÐÐ Docker µÄÖ÷»ú¾Í³ÉÎªÒ»¸ö Swarm ¼¯ÈºµÄ½Úµã (node) ¡£½Úµã·ÖÎª¹ÜÀí (manager) ½ÚµãºÍ¹¤×÷ (worker) ½Úµã¡£
*ÈÎÎñ£¨Task£©ÊÇ Swarm ÖÐµÄ×îÐ¡µÄµ÷¶Èµ¥Î»£¬Ä¿Ç°À´Ëµ¾ÍÊÇÒ»¸öµ¥Ò»µÄÈÝÆ÷£»·þÎñ£¨Services£©ÊÇÖ¸Ò»×éÈÎÎñµÄ¼¯ºÏ£¬·þÎñ¶¨ÒåÁËÈÎÎñµÄÊôÐÔ£¬·þÎñÓÐÁ½ÖÖÄ£Ê½£º
replicated services°´ÕÕÒ»¶¨¹æÔòÔÚ¸÷¸ö¹¤×÷½ÚµãÉÏÔËÐÐÖ¸¶¨¸öÊýµÄÈÎÎñ¡£
global servicesÃ¿¸ö¹¤×÷½ÚµãÉÏÔËÐÐÒ»¸öÈÎÎñ
*docker-machine create -d virtualbox manager
*docker swarm init   #¹ÜÀí½Úµã³õÊ¼»¯
*docker-machine create -d virtualbox worker1
*docker-machine ssh worker1
*docker node ls
*docker service ls
*docker service create --replicas 3 -p 80:80 --name nginx nginx:1.13.7-alpine
*docker service ps nginx
*docker service rm nginx
*docker stack deploy -c docker-compose.yml wordpress
*docker stack ls
*docker stack down
--------------------------------------------------¶à½×¶Î¹¹½¨----------------------------------
*Ê¹ÓÃ¶à½×¶Î¹¹½¨£¬Äã¿ÉÒÔÔÚÒ»¸ö Dockerfile ÖÐÊ¹ÓÃ¶à¸ö FROM Óï¾ä¡£Ã¿¸ö FROM Ö¸Áî¶¼¿ÉÒÔÊ¹ÓÃ²»Í¬µÄ»ù´¡¾µÏñ£¬²¢±íÊ¾¿ªÊ¼Ò»¸öÐÂµÄ¹¹½¨½×¶Î¡£Äã¿ÉÒÔºÜ·½±ãµÄ½«Ò»¸ö½×¶ÎµÄÎÄ¼þ¸´ÖÆµ½ÁíÍâÒ»¸ö½×¶Î£¬ÔÚ×îÖÕµÄ¾µÏñÖÐ±£ÁôÏÂÄãÐèÒªµÄÄÚÈÝ¼´¿É
*FROM golang AS build-env
ADD . /go/src/app
WORKDIR /go/src/app
RUN go get -u -v github.com/kardianos/govendor
RUN govendor sync
RUN GOOS=linux GOARCH=386 go build -v -o /go/src/app/app-server

FROM alpine
RUN apk add -U tzdata
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai  /etc/localtime
COPY --from=build-env /go/src/app/app-server /usr/local/bin/app-server
EXPOSE 8080
CMD [ "app-server" ]
*docker build -t cnych/docker-multi-stage-demo:latest .
*docker run --rm -p 8080:8080 cnych/docker-multi-stage-demo:latest


























